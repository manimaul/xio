xio {

  applicationLimits {
    maxConnections = 15000
  }

  serverLimits {
    maxConnections = 500
    maxFrameSize = 9600
    // triggered when no read was performed for the specified period of time. Specify 0 to disable.
    maxReadIdleTime = 60seconds
    // triggered when no write was performed for the specified period of time. Specify 0 to disable.
    maxWriteIdleTime = 60seconds
    // triggered when neither read nor write was performed for the specified period of time. Specify 0 to disable.
    maxAllIdleTime = 60seconds
  }

  applicationSettings {
    zookeeperCluster = ""
    zookeeper {
      cluster = "localhost:2181"
      client {
        retry {
          policy = RetryOneTime
          BoundedExponentialBackoffRetry {
            baseSleepDuration = 2seconds
            maxSleepDuration = 10seconds
            maxRetries = 10
          }
          ExponentialBackoffRetry {
            baseSleepDuration = 2seconds
            maxRetries = 10
          }
          RetryForever {
            sleepDuration = 2seconds
          }
          RetryNTimes {
            n = 10
            sleepDuration = 2seconds
          }
          RetryOneTime {
            sleepDuration = 2seconds
          }
          RetryUntilElapsed {
            maxElapsedDuration = 10seconds
            sleepDuration = 2seconds
          }
        }
      }
    }
    bossThreads = 5
    bossNameFormat = "xio-application-boss-%d"
    workerThreads = 10
    workerNameFormat = "xio-application-worker-%d"
    // global rate limiter
    global_soft_req_per_sec = 700.0
    global_hard_req_per_sec = 750.0
    // per server rate limiter
    soft_req_per_sec = 500.0
    hard_req_per_sec = 550.0
    // pool size should be approximate to the number of unique clients expected during a steady state condition
    rate_limiter_pool_size = 24
    configurationManager {
      ipFilter {
        path = "/xio/ipFilterRules"
      }
      http1Filter {
        path = "/xio/http1FilterRules"
      }
    }
    configurationUpdateServer {
      enabled = false
      bindIp = 127.0.0.1
      bindPort = 9999
      writeInterval = 5seconds
    }
    requestMuxer {
      messagesPerBatch = 100
      drainMessageQInterval = 1millisecond
      multiplierIncrementInterval = 500milliseconds
      multiplierDecrementInterval = 750milliseconds
      rebuildConnectionLoopInterval = 250milliseconds
    }
    tracing {
      zipkinUrl = ""
      samplingRate = "1.0"
    }
  }

  serverSettings {
    bindIp = 127.0.0.1
    bindPort = 80
    // TODO(CK): deprecate
    bossThreads = 5
    // TODO(CK): deprecate
    workerThreads = 10
    messageLoggerEnabled = true
    tls {
      include classpath("tls-reference.conf")
    }
  }

  applicationTemplate {
    name = ""
    limits = ${xio.applicationLimits}
    settings = ${xio.applicationSettings}
    servers {
    }
    clients {
    }
  }

  serverTemplate {
    name = ""
    limits = ${xio.serverLimits}
    settings = ${xio.serverSettings}
  }

  clientTemplate {
    name = ""
    remoteIp = ""
    remotePort = 0
    localIp = ""
    localPort = 0
    settings {
      messageLoggerEnabled = true
      tls {
        include classpath("tls-reference.conf")
        privateKeyPath = "classpath:xio-default-client-private-key-pkcs8.pem"
        x509CertPath = "classpath:xio-default-client-certificate-x509.pem"
      }
    }
  }

  routeTemplate {
    methods = []
    host = ""
    path = ""
    permissionNeeded = "*"
  }

  defaultApplication = ${xio.applicationTemplate} {
    name = "defaultApplication"
  }

  defaultRoute = ${xio.routeTemplate} {
    path = "/"
  }
}
